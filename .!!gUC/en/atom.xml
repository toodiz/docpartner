<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/en/xsl/atom.xsl" media="all"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://localhost:8000/en/</id>
  <title>Doc Partner</title>
  <subtitle><![CDATA[Site description.]]></subtitle>
  <link href="http://localhost:8000/en/atom.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:8000/en/" rel="alternate" type="text/html" />
  <updated>2024-07-24T13:17:18+00:00</updated>
  <author>
    <name>NDA MEDIA</name>
    <uri>https://ndamedia.fr/</uri>
  </author>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/sms/envoyer-des-sms/envois_smsp2/</id>
    <title>Bulk Sending</title>
    <content type="html">
      <![CDATA[<h1 id="sending-sms">Sending SMS</h1>
<p>This request is used to send SMS in real-time or scheduled...</p>
<h2 id="url">URL</h2>
<div>
  <div style="background-color: #49CC90; color: white;  display: inline-block; padding: 2px 6px; font-weight: bold; border-radius: 4px;">POST</div> 
  <span style=" display: inline-block; vertical-align: middle; margin-left: 10px;"> https://api.smspartner.fr/v1/send</span>
</div>
<h2 id="url-1">URL</h2>
<div>
  <div style="background-color: #49CC90; color: white;  display: inline-block; padding: 2px 6px; font-weight: bold; border-radius: 4px;">POST</div> 
  <span style=" display: inline-block; vertical-align: middle; margin-left: 10px;">https://api.smspartner.fr/v1/bulk-send</span>
</div>
<h2 id="parameters">Parameters</h2>
<div class="alert alert-info">
        The platform does not send commercial SMS between <strong>8 PM and 8 AM on weekdays and on Sundays and public holidays</strong> (legal restriction). If an SMS message is sent, the message is <strong>paused until the next business day at 8 AM</strong>. Not sending commercial SMS? Contact us to disable this restriction: <a href="mailto:help@smspartner.fr">help@smspartner.fr</a>
    </div>
<table>
<thead>
<tr>
<th style="text-align: center;">Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>apiKey</strong></td>
<td>API key of your account. You can obtain it in your <a href="https://my.smspartner.fr/connexion" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;">SMS Partner account</a>.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>SMSList</strong></td>
<td><strong>phoneNumber:</strong> <br> Phone numbers of recipients. For sending multiple SMS, numbers should be separated by commas. <strong>The sending limit on a single request is 500 numbers.</strong> <ul><li>In national format (0600000000) and international format (+33600000000) for French numbers.</li><li>In international format (+496xxxxxxxx) for numbers outside France.</li></ul><strong>message</strong> <br> SMS content. Maximum of <strong>160 characters</strong> per SMS (beyond that, you will be charged an additional SMS per 153 characters). <br>Attention, some special characters and accents are replaced during sending: <a href="#" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;">View the list</a> <br> <br>The character &quot; must be escaped (&quot;) for the SMS text to be valid. Otherwise, a 400 error will be returned. <br>The <code>:br:</code> tag allows for a line break. <strong>Attention, the line break counts as two characters.</strong> <br><strong>The STOP SMS mention is mandatory for commercial SMS (see the <code>isStopSms</code> parameter below).</strong> <br>If it's a marketing account, the STOP SMS mention is added automatically.</td>
</tr>
</tbody>
</table>
<h2 id="optional-parameters">Optional Parameters</h2>
<table>
<thead>
<tr>
<th style="text-align: center;">Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>gamme</strong></td>
<td>SMS range, its value must be: <ul><li>1 for Premium SMS</li><li>2 for Low Cost SMS</li></ul> ⚠️ If this parameter is omitted, SMS will be sent in the Premium range</td>
</tr>
<tr>
<td style="text-align: center;"><strong>sender</strong></td>
<td>Sender name of the message. If the sender is left empty, your SMS will be routed with an operator shortcode as the sender (example: 36xxx). <br>⚠️ The number of characters for the sender name is <strong>between 3 and 11 inclusive</strong> and must not contain special characters. <br>Some phone models do not interpret special characters in the sender name.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>tag</strong></td>
<td>String of maximum 20 characters without space(s) allowing you to tag your sendings.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>scheduledDeliveryDate</strong></td>
<td>SMS sending date, in <code>dd/MM/yyyy</code> format, to be defined only if you want the SMS to be sent at a later time.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>time</strong></td>
<td>SMS sending time (0-24 format), mandatory if <code>scheduledDeliveryDate</code> is defined.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>minute</strong></td>
<td>SMS sending minute (0-55 format, in five-minute intervals), mandatory if <code>scheduledDeliveryDate</code> is defined.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>urlResponse</strong></td>
<td>Response return URL (e.g., <a href="https://www.myresponseurl.com">https://www.myresponseurl.com</a>).</td>
</tr>
<tr>
<td style="text-align: center;"><strong>urlDlr</strong></td>
<td>Delivery receipt return URL (e.g., <a href="https://www.mydlrurl.com">https://www.mydlrurl.com</a>).</td>
</tr>
<tr>
<td style="text-align: center;"><strong>isStopSms</strong></td>
<td>Premium range: 1 to add the STOP mention at the end of the SMS (mandatory for commercial SMS).<br> ⚠️ ECO range: This parameter is not applicable for this range, it is necessary to manually add the NoPub=STOP mention for commercial SMS.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>isUnicode</strong></td>
<td>If 1: Activates Unicode mode, the maximum number of characters per SMS will be 70. <br><strong>Important:</strong> Unicode SMS must be activated on your account by an administrator for sendings to be available. Please contact the technical service for the activation of this feature. <br> <a href="https://www.smspartner.fr/blog/liste-complete-des-emoticones-a-copier-coller" rel="noopener noreferrer nofollow">View the list</a>.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>sandbox</strong></td>
<td>To test SMS sending, you can use the parameter <code>sandbox:</code> <strong>1</strong> to activate sandbox mode. ⚠️ No SMS will be sent, and there will be no debit on your account. These SMS will be automatically deleted from your sending lists every day.</td>
</tr>
<tr>
<td style="text-align: center;"><strong>_format</strong></td>
<td>Response format. You can choose between <code>JSON</code> or <code>XML</code>. By default, the response format is <code>JSON</code></td>
</tr>
</tbody>
</table>
<h2 id="request">Request</h2>
<p>Example of a request</p>
<!-- Nav tabs -->
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="php-tab" data-toggle="tab" href="#php" role="tab" aria-controls="php" aria-selected="true">PHP</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="vbnet-tab" data-toggle="tab" href="#vbnet" role="tab" aria-controls="vbnet" aria-selected="false">VB.net</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="python-tab" data-toggle="tab" href="#python" role="tab" aria-controls="python" aria-selected="false">Python</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="curl-tab" data-toggle="tab" href="#curl" role="tab" aria-controls="curl" aria-selected="false">cURL</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="nodejs-tab" data-toggle="tab" href="#nodejs" role="tab" aria-controls="nodejs" aria-selected="false">NodeJS</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="java-tab" data-toggle="tab" href="#java" role="tab" aria-controls="java" aria-selected="false">JAVA</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="swift-tab" data-toggle="tab" href="#swift" role="tab" aria-controls="swift" aria-selected="false">SWIFT</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="go-tab" data-toggle="tab" href="#go" role="tab" aria-controls="go" aria-selected="false">GO</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="csharp-tab" data-toggle="tab" href="#csharp" role="tab" aria-controls="csharp" aria-selected="false">C#</a>
  </li>
</ul>
<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane fade show active" id="php" role="tabpanel" aria-labelledby="php-tab">
    <pre><code class="language-php">
&lt;?php
// Prepare data for POST request
        $fields = array(
            'apiKey'=&gt; 'YOUR API KEY',
            'sender' =&gt; 'mycompany',
            'scheduledDeliveryDate'=&gt; '21/10/2014',
            'time'=&gt; 9,
            'minute'=&gt; 0,
            'SMSList'=&gt; array(
                array(
                    'phoneNumber'=&gt; '06xxxxxxx1',
                    'message'=&gt; 'msg 0'
                ),
                array(
                    'phoneNumber'=&gt; '06xxxxxxx2',
                    'message'=&gt; 'msg 1'
                )

            )
        );

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL,'https://api.smspartner.fr/v1/bulk-send');
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_TIMEOUT, 10);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS,json_encode($fields));

        $result = curl_exec($curl);
        curl_close($curl);

        // Process your response here
        echo $result;
?&gt;
    </code></pre>
  </div>
  <div class="tab-pane fade" id="vbnet" role="tabpanel" aria-labelledby="vbnet-tab">
   <pre><code class="language-vbnet">
Imports System.IO
Imports System.Net

Module Module1

  Sub Main()

    Dim base_url As String = "http://api.smspartner.fr/v1/"
    Dim apiKey As String = "VOTRE_APIKEY"

    #send sms
    url = base_url &amp; "bulk-send"
    #note : utiliser une librairie JSON en production, par exemple :
    #https//www.nuget.org/packages/Newtonsoft.Json/
    Dim parameters As String = String.Format(
        "{{""apiKey"":""{0}"",""sender"":""{1}"",""SMSList"":""{2}""}}",
        apiKey,
        "mycompany",
        {{ ""phoneNumber"":"06xxxxxxx1",""message"":"msg1"},{ ""phoneNumber"":"06xxxxxxx2",""message"":"msg2"}}
        )
    Console.Write(parameters)
    apiRequest("POST", url, parameters)

  End Sub

  Function apiRequest(method As String, url As String, parameters As String) As String

    Dim request As HttpWebRequest
    request = WebRequest.Create(url)
    request.Method = method
    request.Timeout = 10000   # timeout in ms
    request.ContentType = "application/json; charset=utf-8"
    request.ContentLength = 0

    #set POST data
    If Not String.IsNullOrEmpty(parameters) Then
      request.ContentLength = parameters.Length
      Using reqStream As StreamWriter = New StreamWriter(request.GetRequestStream())
        reqStream.Write(parameters)
      End Using
    End If

    #get response
    Dim returnValue As String = Nothing
    Using response As HttpWebResponse = request.GetResponse()
      If response.StatusCode = HttpStatusCode.OK Then
        Using resStream = response.GetResponseStream()
          If resStream IsNot Nothing Then
            Using reader As New StreamReader(resStream)
              returnValue = reader.ReadToEnd()
            End Using
          End If
        End Using
      End If
    End Using
    apiRequest = returnValue

  End Function

End Module

   </code></pre>
  </div>
  <div class="tab-pane fade" id="python" role="tabpanel" aria-labelledby="python-tab">
    <!-- Python code example goes here -->
    <pre><code class="language-python">
# std
import logging
import json
from collections import OrderedDict

# 3p
import requests

API_KEY = "MY API KEY"
URL = "https://api.smspartner.fr/v1"

class SMSPartner():
    def send_sms(self,phone_numbers, msg, sender = "SMSPartner"):
        #sender = "DEMOSMS"
        print(phone_numbers)

        data = {"apiKey":APIKEY,"sender":sender,"SMSList":[{"phoneNumber":"06xxxxxxx1","message":"msg1"},{"phoneNumber":"06xxxxxxx2","message":"msg2"}]}

        url = URL + "/bulk-send"
        r = requests.post(url, data=json.dumps(data), verify=False)

        r_json = r.json()
        if r_json.get("success") == True:
            print(r_json)
            status = True
        else:
            print("SMS msg {} not delivered to {}".format(msg, phone_numbers))
            status = False
        return status
   </code></pre>
  </div>
  <div class="tab-pane fade" id="nodejs" role="tabpanel" aria-labelledby="nodejs-tab">
    <!-- NodeJS code example goes here -->
    <pre><code class="language-javascript">
const https = require('https');

// Remplacez par votre clé API
const apiKey = 'VOTRE_CLÉ_API';

// Objet JSON qui contient les informations nécessaires pour envoyer les SMS en lots
const data = JSON.stringify({
    apiKey: apiKey,
    sender: 'mycompany',
    scheduledDeliveryDate: '21/10/2014',
    time: 9,
    minute: 0,
    SMSList: [
        {
            phoneNumber: '06xxxxxxx1',
            message: 'msg 0',
        },
        {
            phoneNumber: '06xxxxxxx2',
            message: 'msg 1',
        },
    ],
});

// Définir les options pour la requête HTTP POST vers l'API SMS Partner
const options = {
  hostname: 'api.smspartner.fr',
  port: 443,
  path: '/v1/send',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length,
    'cache-control': 'no-cache',
  },
};

// Demande HTTP POST avec les options et les données définies précédemment
const req = https.request(options, (res) =&gt; {
  console.log(`statusCode: ${res.statusCode}`);

  // Afficher les données de réponse de l'API sur la sortie standard
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});

// Affichage en cas d'erreur lors de l'exécution de la requête HTTP POST
req.on('error', (error) =&gt; {
  console.error(error);
});

// Envoyer les données de l'objet 'data' à la demande
req.write(data);
// Terminer la demande HTTP POST
req.end();
   </code></pre>
  </div>
  <div class="tab-pane fade" id="java" role="tabpanel" aria-labelledby="java-tab">
    <!-- JAVA code example goes here -->
   <pre><code class="language-java">
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.stream.Collectors;
import org.json.JSONArray;
import org.json.JSONObject;

public class SMSRequest {
    public static void main(String[] args) {
        try {
        // Création de l'objet URL avec l'adresse de l'API SMS
               URL url = new URL("https://api.smspartner.fr/v1/bulk-send"
        // Ouverture de la connexion HTTP avec l'API
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("cache-control", "no-cache");
            conn.setDoOutput(true);

            // Création de l'objet JSON contenant les paramètres des SMS à envoyer en lot
            JSONObject json = new JSONObject();
            json.put("apiKey", "VOTRE_API_KEY"); // Remplacez par votre clé API
            json.put("sender", "mycompany");
            json.put("scheduledDeliveryDate", "21/10/2014");
            json.put("time", 9);
            json.put("minute", 0);

            JSONArray SMSList = new JSONArray();
            JSONObject sms1 = new JSONObject();
            sms1.put("phoneNumber", "06xxxxxxx1");
            sms1.put("message", "msg 0");
            SMSList.put(sms1);

            JSONObject sms2 = new JSONObject();
            sms2.put("phoneNumber", "06xxxxxxx2");
            sms2.put("message", "msg 1");
            SMSList.put(sms2);

            json.put("SMSList", SMSList);

        // Écriture des données JSON dans le corps de la requête HTTP
            OutputStream os = conn.getOutputStream(); 
            os.write(json.toString().getBytes());
            os.flush();

        // Lecture de la réponse de l'API
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = br.lines().collect(Collectors.joining());
            System.out.println(response);

        // Fermeture de la connexion HTTP
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="swift" role="tabpanel" aria-labelledby="swift-tab">
    <!-- SWIFT code example goes here -->
    <pre><code class="language-swift">
import SwiftUI

// Cette requête est utilisée pour envoyer des SMS par lot de 500 en temps réel ou en différé
struct SMSParLotsView: View {
    var body: some View {
        // Un bouton qui appelle la fonction sendSMSParLots() lorsqu'il est pressé
        Button(action: {
            sendSMSParLots()
        }) {
            Text("Send Bulk SMS")
                .font(.system(size: 20))
                .foregroundColor(.white)
                .frame(minWidth: 0, maxWidth: .infinity)
                .padding()
                .background(LinearGradient(gradient: Gradient(colors: [Color.blue, Color.blue.opacity(0.8)]), startPoint: .top, endPoint: .bottom))
                .cornerRadius(10)
                .padding(.horizontal)
        }
    }

    func sendSMSParLots() {
        // Liste des SMS à envoyer
        let smsList: [[String: String]] = [
            [
                "phoneNumber": "06XXXXXXXX", // Numéro de téléphone du destinataire
                "message": "msg 0 en temps réel" // Message à envoyer
            ],
            [
                "phoneNumber": "06XXXXXXXX", // Un autre numéro de téléphone
                "message": "msg 1 en temps réel" // Un autre message
            ]
        ]

        // Données à envoyer à l'API
        let data: [String: Any] = [
            "apiKey": "XXXXXXXXXXXX YOUR API KEY XXXXXXXXXXXXX", // Votre clé API
            "sender": "mycompany", // L'expéditeur du SMS
            // Ces 3 lignes permettent de programmer un envoi différé.
            //"scheduledDeliveryDate": "12/05/2023", // Date de livraison prévue
            //"time": 9, // Heure de livraison
            //"minute": 0, // Minute de livraison
            "SMSList": smsList // La liste des SMS à envoyer
        ]

        // Conversion des données en JSON
        guard let jsonData = try? JSONSerialization.data(withJSONObject: data, options: []) else {
            fatalError("Error converting data to JSON.")
        }

        // Création de la requête HTTP
        let url = URL(string: "https://api.smspartner.fr/v1/bulk-send")! // URL de l'API
        var request = URLRequest(url: url)
        request.httpMethod = "POST" // Méthode HTTP
        request.httpBody = jsonData // Corps de la requête
        request.addValue("application/json", forHTTPHeaderField: "Content-Type") // Type de contenu
        request.addValue("(jsonData.count)", forHTTPHeaderField: "Content-Length") // Longueur du contenu
        request.addValue("no-cache", forHTTPHeaderField: "cache-control") // Contrôle du cache

        // Envoi de la requête HTTP
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            // Vérification de la réponse HTTP
            guard let httpResponse = response as? HTTPURLResponse else {
                fatalError("Error: Invalid HTTP response.")
            }
            print("statusCode: (httpResponse.statusCode)") // Impression du code d'état HTTP

            // Gestion des erreurs éventuelles
            if let error = error {
                print("Error: (error.localizedDescription)")
            }

            // Impression de la réponse de l'API
            if let data = data {
                if let responseString = String(data: data, encoding: .utf8) {
                    print("Response: (responseString)")
                }
            }
        }
        task.resume()
    }
}
// Un aperçu de la vue
struct BulkSMSView_Previews: PreviewProvider {
    static var previews: some View {
        SMSParLotsView()
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="go" role="tabpanel" aria-labelledby="go-tab">
    <!-- GO code example goes here -->
    <pre><code class="language-go">
package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "net/http"
)

func main() {
    apiKey := "VOTRE CLE API"
    sender := "monentreprise"
    scheduledDeliveryDate := "21/10/2014"
    time := 9
    minute := 0

    // Construire les données JSON pour la requête POST
    data := map[string]interface{}{
        "apiKey":               apiKey,
        "sender":               sender,
        "scheduledDeliveryDate": scheduledDeliveryDate,
        "time":                 time,
        "minute":               minute,
        "SMSList": []map[string]string{
            {"phoneNumber": "06xxxxxxx1", "message": "msg 0"},
            {"phoneNumber": "06xxxxxxx2", "message": "msg 1"},
        },
    }

    // Convertir les données en JSON
    jsonData, err := json.Marshal(data)
    if err != nil {
        fmt.Println("Erreur lors de la conversion en JSON:", err)
        return
    }

    // Effectuer la requête POST
    url := "https://api.smspartner.fr/v1/bulk-send"
    resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
    if err != nil {
        fmt.Println("Erreur lors de l'envoi de la requête:", err)
        return
    }
    defer resp.Body.Close()

    // Traiter la réponse
    if resp.StatusCode == http.StatusOK {
        body := new(bytes.Buffer)
        _, err := body.ReadFrom(resp.Body)
        if err != nil {
            fmt.Println("Erreur lors de la lecture de la réponse:", err)
            return
        }
        fmt.Println(body.String())
    } else {
        fmt.Println("La requête POST a échoué. Code de réponse:", resp.StatusCode)
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="csharp" role="tabpanel" aria-labelledby="csharp-tab">
    <!-- C# code example goes here -->
    <pre><code class="language-csharp">
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

class Program
{
    private static readonly HttpClient client = new HttpClient();

    static async Task Main(string[] args)
    {
        var request = new
        {
            apiKey = "YOUR_API_KEY",
            sender = "mycompany",
            scheduledDeliveryDate = "21/10/2014",
            time = 9,
            minute = 0,
            SMSList = new[]
            {
                new
                {
                    phoneNumber = "06xxxxxxx1",
                    message = "msg 0"
                },
                new
                {
                    phoneNumber = "06xxxxxxx2",
                    message = "msg 1"
                }
            }
        };

        var content = new StringContent(
            JsonConvert.SerializeObject(request),
            Encoding.UTF8,
            "application/json");

        HttpResponseMessage response = await client.PostAsync("https://api.smspartner.fr/v1/bulk-send", content);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
        else
        {
            Console.WriteLine("POST request failed with status code: " + response.StatusCode);
        }
    }
}
   </code></pre>
  </div>
</div>
<h2 id="responses">Responses</h2>
<h3 id="json">JSON</h3>
<pre><code class="language-json hljs json">{
       <span class="hljs-attr">"success"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">"message_id"</span>: xxxxxx,
    <span class="hljs-attr">"currency"</span>: <span class="hljs-string">"EUR"</span>,
    <span class="hljs-attr">"cost"</span>: <span class="hljs-number">0.076</span>,
    <span class="hljs-attr">"nbSMS"</span>: <span class="hljs-number">2</span>,
    <span class="hljs-attr">"SMSResponse_List"</span>: [
        {
            <span class="hljs-attr">"success"</span>: <span class="hljs-literal">true</span>,
            <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,
            <span class="hljs-attr">"nbSms"</span>: <span class="hljs-number">1</span>,
            <span class="hljs-attr">"cost"</span>: <span class="hljs-number">0.038</span>,
            <span class="hljs-attr">"phoneNumber"</span>: <span class="hljs-string">"+336xxxxxxx1"</span>
        },
        {
            <span class="hljs-attr">"success"</span>: <span class="hljs-literal">true</span>,
            <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,
            <span class="hljs-attr">"nbSms"</span>: <span class="hljs-number">1</span>,
            <span class="hljs-attr">"cost"</span>: <span class="hljs-number">0.038</span>,
            <span class="hljs-attr">"phoneNumber"</span>: <span class="hljs-string">"+336xxxxxxx2"</span>
        }
    ]
}</code></pre>
<h3 id="xml">XML</h3>
<pre><code class="language-xml hljs xml">    <span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
        &lt;![CDATA[EUR]]&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>0.076<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>0.038<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                &lt;![CDATA[+336xxxxxxx1]]&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>0.038<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                &lt;![CDATA[+336xxxxxxx2]]&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></code></pre>
<h2 id="errors">Errors</h2>
<p>Example of an error message:</p>
<h3 id="json-1">JSON</h3>
<pre><code class="language-json hljs json">{
    <span class="hljs-attr">"success"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">"code"</span>: <span class="hljs-number">9</span>,
    <span class="hljs-attr">"errors"</span>: [{
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[message].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The message is required"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[phoneNumbers].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"This phone number is not valid (922264)"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[sender].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The sender cannot be longer than 11 characters"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[scheduledDeliveryDate].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The date (21/11/2014 at :) is earlier than the current date."</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[minute].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The minute is required"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[time].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The time is required"</span>
    }]
}</code></pre>
<h3 id="xml-1">XML</h3>
<pre><code class="language-xml hljs xml"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[message].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The message is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[phoneNumbers].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>This phone number is not valid (922264)<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[sender].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The sender cannot be longer than 11 characters<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[scheduledDeliveryDate].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The date (21/11/2014 at :) is earlier than the current date. If you
                     want to send it now, you must select [Send immediately]<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[minute].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The minute is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[time].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The time is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></code></pre>
<h2 id="control-codes">Control Codes</h2>
<table>
<thead>
<tr>
<th style="text-align: center;">_</th>
<th style="text-align: left;">Code erreurs</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">1</td>
<td style="text-align: left;">The API Key is required</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td style="text-align: left;">The phone number is required</td>
</tr>
<tr>
<td style="text-align: center;">9</td>
<td style="text-align: left;">At least one constraint was not respected during sending :<br> L’émetteur ne peut pas être plus long que 11 caractères.<br>Numéro de téléphone non valide.<br> Si <strong>scheduledDeliveryDate</strong> est défini:<ul><li>La date (dd/mm/yyyy) est antérieure à la date actuelle.</li><li>La minute est requise.</li><li>L’heure est requise..</li></ul></td>
</tr>
<tr>
<td style="text-align: center;">10</td>
<td style="text-align: left;">Clé API incorrecte</td>
</tr>
<tr>
<td style="text-align: center;">11</td>
<td style="text-align: left;">Manque de crédits</td>
</tr>
</tbody>
</table>
<h2 id="list-of-replaced-characters">List of Replaced Characters</h2>
<p>Consult the table of replaced characters : <a href="/docs/tablecaractere" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;"> 📒 View table</a></p>]]>
    </content>
    <link href="http://localhost:8000/en/docs/sms/envoyer-des-sms/envois_smsp2/" rel="alternate" type="text/html" />
    <published>2024-07-24T13:18:36+00:00</published>
    <updated>2024-07-24T13:18:36+00:00</updated>
  </entry>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/sms/envoyer-des-sms/envois_smsp1/</id>
    <title>Single Send</title>
    <content type="html">
      <![CDATA[<h1 id="sending-sms">Sending SMS</h1>
<p>This request is used to send SMS in real-time or scheduled.</p>
<h2 id="url">URL</h2>
<div>
  <div style="background-color: #49CC90; color: white;  display: inline-block; padding: 2px 6px; font-weight: bold; border-radius: 4px;">POST</div> 
  <span style=" display: inline-block; vertical-align: middle; margin-left: 10px;"> https://api.smspartner.fr/v1/send</span>
</div>
<h2 id="parameters">Parameters</h2>
<div class="alert alert-info">
        The platform does not send commercial SMS between <strong>8 PM and 8 AM on weekdays and on Sundays and public holidays</strong> (legal restriction). If an SMS message is sent, the message is <strong>paused until the next business day at 8 AM</strong>. Not sending commercial SMS? Contact us to disable this restriction: <a href="mailto:help@smspartner.fr">help@smspartner.fr</a>
    </div>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>apiKey</strong></td>
<td>API key of your account. You will obtain it in your <a href="https://my.smspartner.fr/connexion" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;">SMS Partner account</a>.</td>
</tr>
<tr>
<td><strong>phoneNumbers</strong></td>
<td>Phone numbers of recipients. For sending multiple SMS, numbers must be separated by commas. <strong>The sending limit on a single request is 500 numbers.</strong> <ul><li>In national format (0600000000) and international format (+33600000000) for French numbers.</li><li>In international format (+496xxxxxxxx) for numbers outside France.</li></ul></td>
</tr>
<tr>
<td><strong>message</strong></td>
<td>SMS content. <strong>160 characters</strong> maximum per SMS (beyond that, you will be charged an additional SMS per 153 characters). <br>Attention, some special characters and accents are replaced during sending: <a href="#" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;">See the list</a> <br>The character &quot; must be escaped (&quot;) for the SMS text to be valid. Otherwise, a 400 error will be returned. <br>The <code>:br:</code> tag allows for a line break. <strong>Attention, the line break counts as two characters.</strong> <br><strong>The STOP SMS mention is mandatory for commercial SMS (see the <code>isStopSms</code> parameter below).</strong> <br>If it's a marketing account, the STOP SMS mention is added automatically.</td>
</tr>
</tbody>
</table>
<h2 id="optional-parameters">Optional Parameters</h2>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>range</strong></td>
<td>SMS range, its value must be: <ul><li>1 for Premium SMS</li><li>2 for Low Cost SMS</li></ul> ⚠️ If this parameter is omitted, SMS will be sent in the Premium range</td>
</tr>
<tr>
<td><strong>sender</strong></td>
<td>Name of the message sender. If the sender is left empty, your SMS will be sent with an operator shortcode as the sender (e.g., 36xxx). <br>⚠️ The number of characters for the sender name is <strong>between 3 and 11 inclusive</strong> and must not contain special characters. <br>Some phone models do not interpret special characters in the sender name.</td>
</tr>
<tr>
<td><strong>tag</strong></td>
<td>String of up to 20 characters without spaces, allowing you to tag your sends.</td>
</tr>
<tr>
<td><strong>scheduledDeliveryDate</strong></td>
<td>SMS sending date, in the format <code>dd/MM/yyyy</code>, to be defined only if you want the SMS to be sent later.</td>
</tr>
<tr>
<td><strong>time</strong></td>
<td>SMS sending time (format 0-24), mandatory if <code>scheduledDeliveryDate</code> is defined.</td>
</tr>
<tr>
<td><strong>minute</strong></td>
<td>SMS sending minute (format 0-55, in five-minute intervals), mandatory if <code>scheduledDeliveryDate</code> is defined.</td>
</tr>
<tr>
<td><strong>urlResponse</strong></td>
<td>Response URL (e.g., <a href="https://www.myresponseurl">https://www.myresponseurl</a>).</td>
</tr>
<tr>
<td><strong>urlDlr</strong></td>
<td>Delivery Receipt URL (e.g., <a href="https://www.mydlrurl">https://www.mydlrurl</a>).</td>
</tr>
<tr>
<td><strong>isStopSms</strong></td>
<td>Premium range: 1 to add the STOP mention at the end of the SMS (mandatory for commercial SMS).<br> ⚠️ ECO range: This parameter is not applicable for this range, you need to manually add the NoPub=STOP mention for commercial SMS.</td>
</tr>
<tr>
<td><strong>isUnicode</strong></td>
<td>If 1: Activates Unicode mode, the maximum number of characters per SMS will be 70. <br><strong>Important:</strong> Unicode SMS must be activated on your account by an administrator for sending to be available. Please contact technical support for the activation of this feature.<br> <a href="https://www.smspartner.fr/blog/liste-complete-des-emoticones-a-copier-coller" rel="noopener noreferrer nofollow">See the list</a>.</td>
</tr>
<tr>
<td><strong>sandbox</strong></td>
<td>To test SMS sending, you can use the <code>sandbox:</code> parameter <strong>1</strong> to activate sandbox mode. ⚠️ No SMS will be sent, and there will be no charge on your account. These SMS will be automatically deleted from your send lists every day.</td>
</tr>
<tr>
<td><strong>_format</strong></td>
<td>Response format. You can choose between <code>JSON</code> or <code>XML</code>. By default, the response format is <code>JSON</code>.</td>
</tr>
</tbody>
</table>
<h2 id="request">Request</h2>
<p>Example of a request</p>
<!-- Nav tabs -->
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="php-tab" data-toggle="tab" href="#php" role="tab" aria-controls="php" aria-selected="true">PHP</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="vbnet-tab" data-toggle="tab" href="#vbnet" role="tab" aria-controls="vbnet" aria-selected="false">VB.net</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="python-tab" data-toggle="tab" href="#python" role="tab" aria-controls="python" aria-selected="false">Python</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="curl-tab" data-toggle="tab" href="#curl" role="tab" aria-controls="curl" aria-selected="false">cURL</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="nodejs-tab" data-toggle="tab" href="#nodejs" role="tab" aria-controls="nodejs" aria-selected="false">NodeJS</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="java-tab" data-toggle="tab" href="#java" role="tab" aria-controls="java" aria-selected="false">JAVA</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="swift-tab" data-toggle="tab" href="#swift" role="tab" aria-controls="swift" aria-selected="false">SWIFT</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="go-tab" data-toggle="tab" href="#go" role="tab" aria-controls="go" aria-selected="false">GO</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="csharp-tab" data-toggle="tab" href="#csharp" role="tab" aria-controls="csharp" aria-selected="false">C#</a>
  </li>
</ul>
<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane fade show active" id="php" role="tabpanel" aria-labelledby="php-tab">
    <pre><code class="language-php">
&lt;?php
// Prepare data for POST request $fields = array( 'apiKey'=&gt; 'YOUR API KEY', 'phoneNumbers'=&gt; '
+336xxxxxxxx', 'message'=&gt; 'This is your message', 'sender' =&gt; 'mycompany',
 'scheduledDeliveryDate'=&gt; '21/10/2014', 'time'=&gt; 9, 'minute'=&gt; 0 );
 $curl = curl_init(); 
 curl_setopt($curl, CURLOPT_URL,'https://api.smspartner.fr/v1/send');
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); 
curl_setopt($curl, CURLOPT_TIMEOUT, 10);
curl_setopt($curl, CURLOPT_POST, 1); 
curl_setopt($curl, CURLOPT_POSTFIELDS,json_encode($fields)); 
$result = curl_exec($curl); 
curl_close($curl);
 // Process your response here echo $result;
?&gt;
    </code></pre>
  </div>
  <div class="tab-pane fade" id="vbnet" role="tabpanel" aria-labelledby="vbnet-tab">
   <pre><code class="language-vbnet">
Imports System.IO
Imports System.Net

Module Module1

  Sub Main()

    Dim base_url As String = "http://api.smspartner.fr/v1/"
    Dim apiKey As String = "VOTRE_APIKEY"

    #send sms
    url = base_url &amp; "send"
    #note : utiliser une librairie JSON en production, par exemple :
    #https//www.nuget.org/packages/Newtonsoft.Json/
    Dim parameters As String = String.Format(
        "{{""apiKey"":""{0}"",""phoneNumbers"":""{1}"",""message"":""{2}""}}",
        apiKey,
        "+33XXXXXXXXX",
        "message de test")
    Console.Write(parameters)
    apiRequest("POST", url, parameters)

  End Sub

  Function apiRequest(method As String, url As String, parameters As String) As String

    Dim request As HttpWebRequest
    request = WebRequest.Create(url)
    request.Method = method
    request.Timeout = 10000   # timeout in ms
    request.ContentType = "application/json; charset=utf-8"
    request.ContentLength = 0

    #set POST data
    If Not String.IsNullOrEmpty(parameters) Then
      request.ContentLength = parameters.Length
      Using reqStream As StreamWriter = New StreamWriter(request.GetRequestStream())
        reqStream.Write(parameters)
      End Using
    End If

    #get response
    Dim returnValue As String = Nothing
    Using response As HttpWebResponse = request.GetResponse()
      If response.StatusCode = HttpStatusCode.OK Then
        Using resStream = response.GetResponseStream()
          If resStream IsNot Nothing Then
            Using reader As New StreamReader(resStream)
              returnValue = reader.ReadToEnd()
            End Using
          End If
        End Using
      End If
    End Using
    apiRequest = returnValue

  End Function

End Module

   </code></pre>
  </div>
  <div class="tab-pane fade" id="python" role="tabpanel" aria-labelledby="python-tab">
    <!-- Python code example goes here -->
    <pre><code class="language-python">
import http.client
import json
conn = http.client.HTTPSConnection("api.smspartner.fr")

payload = json.dumps({
"apiKey": "your api key smspartner", #remplacez par votre clé API SMSPartner
"phoneNumbers": "+336xxxxxxxx", #remplacez par votre numéro de téléphone
"sender": "Your sender name",
"gamme": 1,
"message": "Cest un message test PYTHON", #remplacez par votre message
 "webhookUrl": "https://webhook.site/TOKEN" #remplacez TOKEN par votre token webhook.site
})

headers = {
'Content-Type': 'application/json',
'Content-Length': str(len(payload)),
'cache-control': 'no-cache'
}

conn.request("POST", "/v1/send", payload, headers) #Une requête POST est envoyée au serveur
 SMSPartner avec le chemin d'URL "/v1/send"

res = conn.getresponse() #La réponse est ensuite stockée dans la variable res.

data = res.read() 

print(data.decode("utf-8")) #Cette ligne lit les données de la réponse HTTP.
   </code></pre>
  </div>
  <div class="tab-pane fade" id="curl" role="tabpanel" aria-labelledby="curl-tab">
    <!-- cURL code example goes here -->
    <pre><code class="language-curl">
curl -H  "Content-Type: application/json" -X POST -d '{"apiKey":"xxxxx","phoneNumbers":"xxxx",
"message":"test","sender":"mycompany"}' https://api.smspartner.fr/v1/send
   </code></pre>
  </div>
  <div class="tab-pane fade" id="nodejs" role="tabpanel" aria-labelledby="nodejs-tab">
    <!-- NodeJS code example goes here -->
    <pre><code class="language-javascript">
// Importer le module 'https' de Node.js
const https = require('https');

// Objet JSON qui contient les informations nécessaires pour envoyer le SMS
const data = JSON.stringify({
    apiKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', //remplacez par votre clé API
    phoneNumbers: '+336XXXXXXXX',  //remplacez par votre numéro de téléphone
    sender: 'NodeJS',
    gamme: 1,
    message: "Cest un message test NodeJS" //remplacez par votre message
});

// Définir les options pour la requête HTTP POST vers l'API SMS Partner
const options = {
  hostname: 'api.smspartner.fr',
  port: 443,
  path: '/v1/send',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length,
    'cache-control': 'no-cache',
    'webhookUrl': 'https://webhook.site/TOKEN' // Webhook URL *cette ligne est optionnel*
  }
};

// Demande HTTP POST avec les options et les données définies précédemment
const req = https.request(options, (res) =&gt; {
  console.log(`statusCode: ${res.statusCode}`);

  // Afficher les données de réponse de l'API sur la sortie standard
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});

// Affichage en cas d'erreur lors de l'exécution de la requête HTTP POST
req.on('error', (error) =&gt; {
  console.error(error);
});

// Envoyer les données de l'objet 'data' à la demande
req.write(data);
// Terminer la demande HTTP POST
req.end();
   </code></pre>
  </div>
  <div class="tab-pane fade" id="java" role="tabpanel" aria-labelledby="java-tab">
    <!-- JAVA code example goes here -->
   <pre><code class="language-java">
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.stream.Collectors;
import org.json.JSONObject;

public class SMSRequest {
    public static void main(String[] args) {
        try {
        // Création de l'objet URL avec l'adresse de l'API SMS
            URL url = new URL("https://api.smspartner.fr/v1/send");
        // Ouverture de la connexion HTTP avec l'API
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("cache-control", "no-cache");
            conn.setDoOutput(true);

        // Création de l'objet JSON contenant les paramètres du SMS à envoyer   
            JSONObject json = new JSONObject();
            json.put("apiKey", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"); //your api key smspartner
            json.put("phoneNumbers", "+336XXXXXXXX"); //your phone number
            json.put("virtualNumber", "+336XXXXXXXX");
            json.put("sender", "demo JAVA");
            json.put("gamme", 1);
            json.put("message", "C'est un message test en JAVA !");
            json.put("webhookUrl", "https://webhook.site/TOKEN"); //your webhook url

        // Écriture des données JSON dans le corps de la requête HTTP
            OutputStream os = conn.getOutputStream(); 
            os.write(json.toString().getBytes());
            os.flush();

        // Lecture de la réponse de l'API
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = br.lines().collect(Collectors.joining());
            System.out.println(response);

        // Fermeture de la connexion HTTP
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="swift" role="tabpanel" aria-labelledby="swift-tab">
    <!-- SWIFT code example goes here -->
    <pre><code class="language-swift">
import SwiftUI

struct SMSUnitaire: View {
    var body: some View {
        // Un bouton qui appelle la fonction sendSMS() lorsqu'il est pressé
        Button(action: {
            sendSMS()
        }) {
            Text("Envoyer SMS unitaire")
                .font(.system(size: 20)) // Taille du texte
                .foregroundColor(.white) // Couleur du texte
                .frame(minWidth: 0, maxWidth: .infinity) // Taille du bouton, qui s'ajuste automatiquement
                .padding() // Padding autour du texte
                .background(LinearGradient(gradient: Gradient(colors: [Color.blue, Color.blue.opacity
                (0.8)]), startPoint: .top, endPoint: .bottom)) // Fond du bouton, un dégradé de bleu
                .cornerRadius(10) // Coins arrondis du bouton
                .padding(.horizontal) // Espacement horizontal autour du bouton
        }
    }

    func sendSMS() {
        // Objet JSON contenant les informations nécessaires pour envoyer le SMS
        let data = [
            "apiKey": "XXXXXXXXXXXX YOUR API KEY XXXXXXXXXXXXX", // remplacez par votre clé API
            "phoneNumbers": "+336XXXXXXXX", // remplacez par votre numéro de téléphone
            "sender": "Swift",
            "gamme": 1,
            "message": "C'est un message test Swift" // remplacez par votre message
        ] as [String : Any]

        // Conversion de l'objet JSON en données
        guard let jsonData = try? JSONSerialization.data(withJSONObject: data, options: []) else {
            fatalError("Erreur lors de la conversion des données en JSON.")
        }

        // Définition des options pour la requête HTTP POST à l'API SMS Partner
        let url = URL(string: "https://api.smspartner.fr/v1/send")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST" // Méthode HTTP
        request.httpBody = jsonData // Corps de la requête
        request.addValue("application/json", forHTTPHeaderField: "Content-Type") // Type de contenu 
        request.addValue("(jsonData.count)", forHTTPHeaderField: "Content-Length") // Longueur du  contenu
        request.addValue("no-cache", forHTTPHeaderField: "cache-control") // Contrôle du cache 
        request.addValue("https://webhook.site/TOKEN", forHTTPHeaderField: "webhookUrl") // URL du
         webhook *cette ligne est facultative*

        // Exécution de la requête HTTP POST avec les options et données définies précédemment
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            guard let httpResponse = response as? HTTPURLResponse else {
                fatalError("Erreur : réponse HTTP non valide.")
            }
            print("statusCode: (httpResponse.statusCode)") // Impression du statut HTTP

            if let error = error {
                print("Error: (error.localizedDescription)") // Impression de l'erreur, si elle existe
            }

            if let data = data {
                if let responseString = String(data: data, encoding: .utf8) {
                    print("Réponse : (responseString)") // Impression de la réponse, si elle existe
                }
            }
        }
        task.resume() // Démarrage de la tâche
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="go" role="tabpanel" aria-labelledby="go-tab">
    <!-- GO code example goes here -->
    <pre><code class="language-go">
package main

import (
    "bytes"
    "fmt"
    "net/http"
)

func main() {
    apiKey := "VOTRE CLE API"
    phoneNumbers := "+336xxxxxxxx"
    message := "Ceci est votre message"
    sender := "monentreprise"
    scheduledDeliveryDate := "21/10/2014"
    time := 9
    minute := 0

    // Construire le corps JSON pour la requête POST
    jsonData := fmt.Sprintf(`{
        "apiKey": "%s",
        "phoneNumbers": "%s",
        "message": "%s",
        "sender": "%s",
        "scheduledDeliveryDate": "%s",
        "time": %d,
        "minute": %d
    }`, apiKey, phoneNumbers, message, sender, scheduledDeliveryDate, time, minute)

    // Effectuer la requête POST
    url := "https://api.smspartner.fr/v1/send"
    req, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsonData)))
    if err != nil {
        fmt.Println("Erreur lors de la création de la requête:", err)
        return
    }
    req.Header.Set("Content-Type", "application/json")

    client := &amp;http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        fmt.Println("Erreur lors de l'envoi de la requête:", err)
        return
    }
    defer resp.Body.Close()

    // Traiter la réponse
    if resp.StatusCode == http.StatusOK {
        body := new(bytes.Buffer)
        _, err := body.ReadFrom(resp.Body)
        if err != nil {
            fmt.Println("Erreur lors de la lecture de la réponse:", err)
            return
        }
        fmt.Println(body.String())
    } else {
        fmt.Println("La requête POST a échoué. Code de réponse:", resp.StatusCode)
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="csharp" role="tabpanel" aria-labelledby="csharp-tab">
    <!-- C# code example goes here -->
    <pre><code class="language-csharp">
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

class Program
{
    private static readonly HttpClient client = new HttpClient();

    static async Task Main(string[] args)
    {
        var request = new
        {
            apiKey = "YOUR_API_KEY",
            phoneNumbers = "+336xxxxxxxx",
            message = "This is your message",
            sender = "mycompany",
            scheduledDeliveryDate = "21/10/2014",
            time = 9,
            minute = 0
        };

        var content = new StringContent(
            JsonConvert.SerializeObject(request),
            Encoding.UTF8,
            "application/json");

        HttpResponseMessage response = await client.PostAsync("https://api.smspartner.fr/v1/send", content);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
        else
        {
            Console.WriteLine("POST request failed with status code: " + response.StatusCode);
        }
    }
}
   </code></pre>
  </div>
</div>
<h2 id="responses">Responses</h2>
<h3 id="json">JSON</h3>
<pre><code class="language-json hljs json">{
   <span class="hljs-attr">"success"</span>:<span class="hljs-literal">true</span>,
   <span class="hljs-attr">"code"</span>:<span class="hljs-number">200</span>,
   <span class="hljs-attr">"message_id"</span>:<span class="hljs-number">307</span>,
   <span class="hljs-attr">"nb_sms"</span>: <span class="hljs-number">1</span>,
   <span class="hljs-attr">"cost"</span>: <span class="hljs-number">0.038</span>,
   <span class="hljs-attr">"currency"</span>: <span class="hljs-string">"EUR"</span>
}</code></pre>
<h3 id="xml">XML</h3>
<pre><code class="language-xml hljs xml">    <span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>306<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>0.038<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
        &lt;![CDATA[EUR]]&gt;
  <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></code></pre>
<h2 id="errors">Errors</h2>
<p>Example of an error message:</p>
<h3 id="json-1">JSON</h3>
<pre><code class="language-json hljs json">{
    <span class="hljs-attr">"success"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">"code"</span>: <span class="hljs-number">9</span>,
    <span class="hljs-attr">"errors"</span>: [{
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[message].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The message is required"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[phoneNumbers].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"This phone number is not valid (922264)"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[sender].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The sender cannot be longer than 11 characters"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[scheduledDeliveryDate].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The date (21/11/2014 at :) is earlier than the current date."</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[minute].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The minute is required"</span>
    }, {
        <span class="hljs-attr">"elementId"</span>: <span class="hljs-string">"children[time].data"</span>,
        <span class="hljs-attr">"message"</span>: <span class="hljs-string">"The time is required"</span>
    }]
}</code></pre>
<h3 id="xml-1">XML</h3>
<pre><code class="language-xml hljs xml"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[message].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The message is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[phoneNumbers].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>This phone number is not valid (922264)<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[sender].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The sender cannot be longer than 11 characters<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[scheduledDeliveryDate].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The date (21/11/2014 at :) is earlier than the current date. If you
                     want to send it now, you must select [Send immediately]<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[minute].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The minute is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>children[time].data<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>The time is required<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></code></pre>
<h2 id="control-codes">Control Codes</h2>
<table>
<thead>
<tr>
<th style="text-align: center;">_</th>
<th style="text-align: left;">Code erreurs</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">1</td>
<td style="text-align: left;">The API Key is required</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td style="text-align: left;">The phone number is required</td>
</tr>
<tr>
<td style="text-align: center;">9</td>
<td style="text-align: left;">At least one constraint was not respected during sending :<br> L’émetteur ne peut pas être plus long que 11 caractères.<br>Numéro de téléphone non valide.<br> Si <strong>scheduledDeliveryDate</strong> est défini:<ul><li>La date (dd/mm/yyyy) est antérieure à la date actuelle.</li><li>La minute est requise.</li><li>L’heure est requise..</li></ul></td>
</tr>
<tr>
<td style="text-align: center;">10</td>
<td style="text-align: left;">Clé API incorrecte</td>
</tr>
<tr>
<td style="text-align: center;">11</td>
<td style="text-align: left;">Manque de crédits</td>
</tr>
</tbody>
</table>
<h2 id="list-of-replaced-characters">List of Replaced Characters</h2>
<p>Consult the table of replaced characters : <a href="/docs/tablecaractere" style="background-color: #47a947; color: white; padding: 5px 8px; text-decoration: none; border-radius: 4px;"> 📒 View table</a></p>]]>
    </content>
    <link href="http://localhost:8000/en/docs/sms/envoyer-des-sms/envois_smsp1/" rel="alternate" type="text/html" />
    <published>2024-07-24T13:17:18+00:00</published>
    <updated>2024-07-24T13:17:18+00:00</updated>
  </entry>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/sms/smsp2/</id>
    <title>Credits</title>
    <content type="html">
      <![CDATA[<h1 id="introduction-to-sms-partner-api">Introduction to SMS Partner API</h1>
<p>This endpoint is used to retrieve your available SMS credits and the number of pending SMS.</p>
<h2 id="url">URL</h2>
<div>
  <div style="background-color: #FF4C4C; color: white; display: inline-block; padding: 2px 6px; font-weight: bold; border-radius: 4px;">GET</div> 
  <span style="color: red; display: inline-block; vertical-align: middle; margin-left: 10px;">https://api.smspartner.fr/v1/me</span>
</div>
<h2 id="parameters">Parameters</h2>
<p>Each API request supports the following parameters:</p>
<table>
<thead>
<tr>
<th style="text-align: left;">Parameter</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>apiKey</strong></td>
<td style="text-align: left;">Your account's API key obtained from SMS Partner dashboard.</td>
</tr>
</tbody>
</table>
<h3 id="optional-parameters">Optional Parameters</h3>
<table>
<thead>
<tr>
<th style="text-align: left;">Parameter</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>_format</strong></td>
<td style="text-align: left;">Response format. Choose between JSON or XML. JSON is the default format.</td>
</tr>
</tbody>
</table>
<h2 id="request">Request</h2>
<p>Sample request:</p>
<!-- Nav tabs -->
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="php-tab" data-toggle="tab" href="#php" role="tab" aria-controls="php" aria-selected="true">PHP</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="vbnet-tab" data-toggle="tab" href="#vbnet" role="tab" aria-controls="vbnet" aria-selected="false">VB.net</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="python-tab" data-toggle="tab" href="#python" role="tab" aria-controls="python" aria-selected="false">Python</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="curl-tab" data-toggle="tab" href="#curl" role="tab" aria-controls="curl" aria-selected="false">cURL</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="nodejs-tab" data-toggle="tab" href="#nodejs" role="tab" aria-controls="nodejs" aria-selected="false">NodeJS</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="java-tab" data-toggle="tab" href="#java" role="tab" aria-controls="java" aria-selected="false">JAVA</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="swift-tab" data-toggle="tab" href="#swift" role="tab" aria-controls="swift" aria-selected="false">SWIFT</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="go-tab" data-toggle="tab" href="#go" role="tab" aria-controls="go" aria-selected="false">GO</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="csharp-tab" data-toggle="tab" href="#csharp" role="tab" aria-controls="csharp" aria-selected="false">C#</a>
  </li>
</ul>
<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane fade show active" id="php" role="tabpanel" aria-labelledby="php-tab">
    <pre><code class="language-php">
&lt;?php
// Prepare data for GET request
$data = 'apiKey=YOUR_API_KEY';

$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, 'https://api.smspartner.fr/v1/me?' . $data);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_TIMEOUT, 10);

$result = curl_exec($curl);
curl_close($curl);

// Process your response here
echo $result;
?&gt;
    </code></pre>
  </div>
  <div class="tab-pane fade" id="vbnet" role="tabpanel" aria-labelledby="vbnet-tab">
   <pre><code class="language-vbnet">
cURL
Imports System.IO
Imports System.Net

Module Module1

  Sub Main()

    Dim base_url As String = "http://api.smspartner.fr/v1/"
    Dim apiKey As String = "VOTRE_APIKEY"

    #check credits
    Dim url As String
    url = base_url &amp; "me" &amp; "?apiKey=" &amp; apiKey

    Dim credits As String
    credits = apiRequest("GET", url, Nothing)

  End Sub

  Function apiRequest(method As String, url As String, parameters As String) As String

    Dim request As HttpWebRequest
    request = WebRequest.Create(url)
    request.Method = method
    request.Timeout = 10000   # timeout in ms
    request.ContentType = "application/json; charset=utf-8"
    request.ContentLength = 0

    #set POST data
    If Not String.IsNullOrEmpty(parameters) Then
      request.ContentLength = parameters.Length
      Using reqStream As StreamWriter = New StreamWriter(request.GetRequestStream())
        reqStream.Write(parameters)
      End Using
    End If

    #get response
    Dim returnValue As String = Nothing
    Using response As HttpWebResponse = request.GetResponse()
      If response.StatusCode = HttpStatusCode.OK Then
        Using resStream = response.GetResponseStream()
          If resStream IsNot Nothing Then
            Using reader As New StreamReader(resStream)
              returnValue = reader.ReadToEnd()
            End Using
          End If
        End Using
      End If
    End Using
    apiRequest = returnValue

  End Function

End Module

   </code></pre>
  </div>
  <div class="tab-pane fade" id="python" role="tabpanel" aria-labelledby="python-tab">
    <!-- Python code example goes here -->
    <pre><code class="language-python">
# std
import logging
import json
from collections import OrderedDict

# 3p
import requests

API_KEY = "MY API KEY"
URL = "https://api.smspartner.fr/v1"

class SMSPartner():
    def get_balance(self):
        url = URL + "/me?apiKey=" + API_KEY
        r = requests.get(url)
        r_json = r.json()
        if r_json.get("success") == True:
            print(r_json)
            status = True
        else:
            print(r_json)
            status = False
        return status
   </code></pre>
  </div>
  <div class="tab-pane fade" id="curl" role="tabpanel" aria-labelledby="curl-tab">
    <!-- cURL code example goes here -->
    <pre><code class="language-curl">
    curl -H "Content-Type: application/json" -X GET  https://api.smspartner.fr/v1/me?apiKey=xxx
   </code></pre>
  </div>
  <div class="tab-pane fade" id="nodejs" role="tabpanel" aria-labelledby="nodejs-tab">
    <!-- NodeJS code example goes here -->
    <pre><code class="language-javascript">
const https = require('https');
// Préparer les données pour la requête GET
let data = 'apiKey=YOUR API KEY';
let url = 'https://api.smspartner.fr/v1/me?' + data;

https.get(url, (res) =&gt; {
  let data = ';

  // Un morceau de données a été reçu.
  res.on('data', (chunk) =&gt; {
    data += chunk;
  });

  // La totalité de la réponse a été reçue. Imprimer le résultat.
  res.on('end', () =&gt; {
    console.log(JSON.parse(data));
  });

}).on("error", (err) =&gt; {
  // Un message d'erreur sera imprimé en cas d'erreur.
  console.log("Erreur: " + err.message);
});
   </code></pre>
  </div>
  <div class="tab-pane fade" id="java" role="tabpanel" aria-labelledby="java-tab">
    <!-- JAVA code example goes here -->
   <pre><code class="language-java">
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class CreditsSms {
    public static void main(String[] args) {
        try {
            String apiKey = "your_api_key";
            String url = "https://api.smspartner.fr/v1/me?apiKey=" + apiKey;

            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");

            int responseCode = con.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                System.out.println(response.toString());
            } else {
                System.out.println("GET request failed. Response Code: " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="swift" role="tabpanel" aria-labelledby="swift-tab">
    <!-- SWIFT code example goes here -->
    <pre><code class="language-swift">
import SwiftUI

struct Credits: View {
    @State private var credit: String = "Loading..."

    var body: some View {
        VStack {
            Text("Mon crédit")
                .font(.title)
                .padding()

            Text(credit)
                .font(.system(size: 20))
                .padding()
        }
        .onAppear(perform: getCredit)
    }

    func getCredit() {
        let apiKey = "Your-api-key"
        let urlString = "https://api.smspartner.fr/v1/me?apiKey=(apiKey)"

        guard let url = URL(string: urlString) else {
            print("URL inválida")
            return
        }

        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in
            if let error = error {
                print("Error: (error)")
            } else if let data = data {
                let result = String(data: data, encoding: .utf8)
                DispatchQueue.main.async {
                    credit = result ?? "Error"
                }
            }
        }

        task.resume()
    }
}

struct CreditView_Previews: PreviewProvider {
    static var previews: some View {
        Credits()
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="go" role="tabpanel" aria-labelledby="go-tab">
    <!-- GO code example goes here -->
    <pre><code class="language-go">
package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
)

func main() {
    apiKey := "your_api_key"
    url := "https://api.smspartner.fr/v1/me?apiKey=" + apiKey

    response, err := http.Get(url)
    if err != nil {
        fmt.Println("GET request failed:", err)
        return
    }
    defer response.Body.Close()

    if response.StatusCode == http.StatusOK {
        bodyBytes, err := ioutil.ReadAll(response.Body)
        if err != nil {
            fmt.Println("Failed to read response body:", err)
            return
        }
        fmt.Println(string(bodyBytes))
    } else {
        fmt.Println("GET request failed. Response Code:", response.StatusCode)
    }
}
   </code></pre>
  </div>
  <div class="tab-pane fade" id="csharp" role="tabpanel" aria-labelledby="csharp-tab">
    <!-- C# code example goes here -->
    <pre><code class="language-csharp">
using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    private static readonly HttpClient client = new HttpClient();

    static async Task Main(string[] args)
    {
        var apiKey = "YOUR_API_KEY";
        var uri = new Uri($"https://api.smspartner.fr/v1/me?apiKey={apiKey}");

        HttpResponseMessage response = await client.GetAsync(uri);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
        else
        {
            Console.WriteLine("GET request failed with status code: " + response.StatusCode);
        }
    }
}
   </code></pre>
  </div>
</div>
<h2 id="responses">Responses</h2>
<h3 id="json">JSON</h3>
<pre><code class="language-json hljs json">{
    <span class="hljs-attr">"success"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">"user"</span>: {
        <span class="hljs-attr">"username"</span>: <span class="hljs-string">"example@email.com"</span>,
        <span class="hljs-attr">"firstname"</span>: <span class="hljs-string">"John"</span>,
        <span class="hljs-attr">"lastname"</span>: <span class="hljs-string">"Doe"</span>
    },
    <span class="hljs-attr">"credits"</span>: {
        <span class="hljs-attr">"creditSms"</span>: <span class="hljs-number">269082</span>,
        <span class="hljs-attr">"creditSmsECO"</span>: <span class="hljs-number">444570</span>,
        <span class="hljs-attr">"creditHlr"</span>: <span class="hljs-number">2045023</span>,
        <span class="hljs-attr">"toSend"</span>: <span class="hljs-number">0</span>,
        <span class="hljs-attr">"balance"</span>: <span class="hljs-string">"10225.119"</span>,
        <span class="hljs-attr">"currency"</span>: <span class="hljs-string">"EUR"</span>
    }
}</code></pre>
<h3 id="xml">XML</h3>
<pre><code class="language-xml hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"language-xml"</span>&gt;</span>
<span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>exemple@email.com<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>269070<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>444551<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>2044937<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
            &lt;![CDATA[10224.688]]&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
            &lt;![CDATA[EUR]]&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>
            &lt;![CDATA[10224.688]]&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></code></pre>
<h2 id="status-codes">Status Codes</h2>
<table>
<thead>
<tr>
<th style="text-align: center;">Code</th>
<th style="text-align: left;">Response</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">10</td>
<td style="text-align: left;">Incorrect API Key</td>
</tr>
<tr>
<td style="text-align: center;">200</td>
<td style="text-align: left;">Successful request !</td>
</tr>
</tbody>
</table>]]>
    </content>
    <link href="http://localhost:8000/en/docs/sms/smsp2/" rel="alternate" type="text/html" />
    <published>2024-07-24T13:14:43+00:00</published>
    <updated>2024-07-24T13:14:43+00:00</updated>
  </entry>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/tablecaractere/</id>
    <title>List of Replaced Characters</title>
    <content type="html">
      <![CDATA[<p><br></p>
<h1 id="list-of-replaced-characters">List of Replaced Characters</h1>
<table>
<thead>
<tr>
<th style="text-align: center;">Characters</th>
<th style="text-align: center;">Replaced by</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">ą</td>
<td style="text-align: center;">à</td>
</tr>
<tr>
<td style="text-align: center;">’</td>
<td style="text-align: center;">‘</td>
</tr>
<tr>
<td style="text-align: center;">ÿ</td>
<td style="text-align: center;">y</td>
</tr>
<tr>
<td style="text-align: center;">ç</td>
<td style="text-align: center;">Ç</td>
</tr>
<tr>
<td style="text-align: center;">û</td>
<td style="text-align: center;">u</td>
</tr>
<tr>
<td style="text-align: center;">ü</td>
<td style="text-align: center;">u</td>
</tr>
<tr>
<td style="text-align: center;">ï</td>
<td style="text-align: center;">i</td>
</tr>
<tr>
<td style="text-align: center;">ô</td>
<td style="text-align: center;">o</td>
</tr>
<tr>
<td style="text-align: center;">ö</td>
<td style="text-align: center;">o</td>
</tr>
<tr>
<td style="text-align: center;">ó</td>
<td style="text-align: center;">o</td>
</tr>
<tr>
<td style="text-align: center;">î</td>
<td style="text-align: center;">i</td>
</tr>
<tr>
<td style="text-align: center;">ë</td>
<td style="text-align: center;">e</td>
</tr>
<tr>
<td style="text-align: center;">ê</td>
<td style="text-align: center;">e</td>
</tr>
<tr>
<td style="text-align: center;">[</td>
<td style="text-align: center;">(</td>
</tr>
<tr>
<td style="text-align: center;">]</td>
<td style="text-align: center;">)</td>
</tr>
<tr>
<td style="text-align: center;">{</td>
<td style="text-align: center;">(</td>
</tr>
<tr>
<td style="text-align: center;">}</td>
<td style="text-align: center;">)</td>
</tr>
<tr>
<td style="text-align: center;">`</td>
<td style="text-align: center;">‘</td>
</tr>
<tr>
<td style="text-align: center;">µ</td>
<td style="text-align: center;">u</td>
</tr>
<tr>
<td style="text-align: center;">Ä</td>
<td style="text-align: center;">A</td>
</tr>
<tr>
<td style="text-align: center;">À</td>
<td style="text-align: center;">A</td>
</tr>
<tr>
<td style="text-align: center;">Á</td>
<td style="text-align: center;">A</td>
</tr>
<tr>
<td style="text-align: center;">Â</td>
<td style="text-align: center;">A</td>
</tr>
<tr>
<td style="text-align: center;">Ã</td>
<td style="text-align: center;">A</td>
</tr>
<tr>
<td style="text-align: center;">È</td>
<td style="text-align: center;">E</td>
</tr>
<tr>
<td style="text-align: center;">Ê</td>
<td style="text-align: center;">E</td>
</tr>
<tr>
<td style="text-align: center;">Ë</td>
<td style="text-align: center;">E</td>
</tr>
<tr>
<td style="text-align: center;">Î</td>
<td style="text-align: center;">I</td>
</tr>
<tr>
<td style="text-align: center;">Ü</td>
<td style="text-align: center;">U</td>
</tr>
<tr>
<td style="text-align: center;">Ù</td>
<td style="text-align: center;">U</td>
</tr>
<tr>
<td style="text-align: center;">Ú</td>
<td style="text-align: center;">U</td>
</tr>
<tr>
<td style="text-align: center;">Û</td>
<td style="text-align: center;">U</td>
</tr>
<tr>
<td style="text-align: center;">Ý</td>
<td style="text-align: center;">Y</td>
</tr>
<tr>
<td style="text-align: center;">ä</td>
<td style="text-align: center;">a</td>
</tr>
<tr>
<td style="text-align: center;">á</td>
<td style="text-align: center;">a</td>
</tr>
<tr>
<td style="text-align: center;">â</td>
<td style="text-align: center;">a</td>
</tr>
<tr>
<td style="text-align: center;">ã</td>
<td style="text-align: center;">a</td>
</tr>
<tr>
<td style="text-align: center;">Ö</td>
<td style="text-align: center;">O</td>
</tr>
<tr>
<td style="text-align: center;">Ô</td>
<td style="text-align: center;">O</td>
</tr>
<tr>
<td style="text-align: center;">œ</td>
<td style="text-align: center;">oe</td>
</tr>
<tr>
<td style="text-align: center;">^</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">~</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">|</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">\</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">¨</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">°</td>
<td style="text-align: center;">.</td>
</tr>
<tr>
<td style="text-align: center;">‘</td>
<td style="text-align: center;">‘</td>
</tr>
<tr>
<td style="text-align: center;">“</td>
<td style="text-align: center;">‘</td>
</tr>
<tr>
<td style="text-align: center;">ñ</td>
<td style="text-align: center;">n</td>
</tr>
<tr>
<td style="text-align: center;">Ñ</td>
<td style="text-align: center;">N</td>
</tr>
<tr>
<td style="text-align: center;">§</td>
<td style="text-align: center;">Removed</td>
</tr>
<tr>
<td style="text-align: center;">«</td>
<td style="text-align: center;">“</td>
</tr>
<tr>
<td style="text-align: center;">»</td>
<td style="text-align: center;">“</td>
</tr>
</tbody>
</table>]]>
    </content>
    <link href="http://localhost:8000/en/docs/tablecaractere/" rel="alternate" type="text/html" />
    <published>2024-07-23T08:49:43+00:00</published>
    <updated>2024-07-23T08:49:43+00:00</updated>
  </entry>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/sms/page-01/</id>
    <title>Introduction</title>
    <content type="html">
      <![CDATA[<h1 id="introduction-to-sms-partner-s-api">Introduction to SMS Partner’s API</h1>
<p>SMS messages are sent from the <a href="https://www.smspartner.fr/api-sms/" rel="noopener noreferrer nofollow">SMS Partner</a> platform. From the site, you have immediate access to our free API: it allows you to easily integrate our SMS services into your website, software or CRM application in PHP, ASP, .NET, Java or any other language.</p>
<h2 id="parameters">Parameters</h2>
<p>Each API request supports at least the following parameters:</p>
<table>
<thead>
<tr>
<th style="text-align: left;">Parameters</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><code>apiKey</code></td>
<td style="text-align: left;">CAPI Key of your account. You get it in your  <a href="https://my.smspartner.fr/connexion" rel="noopener noreferrer nofollow">SMS Partner account.</a>.</td>
</tr>
</tbody>
</table>
<h3 id="optional-parameters">Optional parameters</h3>
<table>
<thead>
<tr>
<th style="text-align: left;">Paramèters</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><code>_format</code></td>
<td style="text-align: left;">Format of the response. You can choose between <code>json</code> and <code>xml</code>. By default, the response format is <code>json</code>. Example : <code>https://api.smspartner.fr/v1/me?apiKey=YOUR_API_KEY&amp;_format=json</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align: left;">_<em>format</em></th>
<th style="text-align: left;"><em>Content-Type</em></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">json</td>
<td style="text-align: left;">application/json</td>
</tr>
<tr>
<td style="text-align: left;">xml</td>
<td style="text-align: left;">application/xml</td>
</tr>
</tbody>
</table>
<h4 id="json">JSON</h4>
<pre><code class="language-json hljs json">POST /v1/send HTTP/<span class="hljs-number">1.1</span>
Host: api.smspartner.fr
Content-Type: application/json

{
    <span class="hljs-attr">"apiKey"</span>: <span class="hljs-string">"API_KEY"</span>,
    <span class="hljs-attr">"phoneNumbers"</span>: <span class="hljs-string">"+33600000000"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Hello world"</span>
}</code></pre>
<h2 id="requests">Requests</h2>
<p>All API requests must be sent to <a href="http://api.smspartner.fr/v1/ordered">http://api.smspartner.fr/v1/ordered</a>, ordered is the API call you want to execute, with the parameters included in the body POST or URL (GET).</p>
<h2 id="download-an-example-in-php">Download an example in PHP</h2>
<p><a href="https://github.com/smspartnerfr/SMS-API-PHP" class="btn btn-success btn-sm text-white">API Example </a></p>
<p>Feel free to consult our <a href="https://docpartner.dev/sdks" rel="noopener noreferrer nofollow">SDK</a>. available on this site.</p>]]>
    </content>
    <link href="http://localhost:8000/en/docs/sms/page-01/" rel="alternate" type="text/html" />
    <published>2024-07-18T13:56:53+00:00</published>
    <updated>2024-07-18T13:56:53+00:00</updated>
  </entry>
  <entry xml:lang="en">
    <id>http://localhost:8000/en/docs/voix/voix-page-01/</id>
    <title>Introduction</title>
    <content type="html">
      <![CDATA[<h1 id="page-2">Page 2</h1>
<h2 id="title-1">Title 1</h2>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h2 id="title-2">Title 2</h2>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>]]>
    </content>
    <link href="http://localhost:8000/en/docs/voix/voix-page-01/" rel="alternate" type="text/html" />
    <published>2024-07-12T13:46:56+00:00</published>
    <updated>2024-07-12T13:46:56+00:00</updated>
  </entry>
</feed>
