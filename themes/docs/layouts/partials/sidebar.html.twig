{#- sidebar ~#}
<div id="sidebar" class="flex flex-col fixed z-50 lg:z-0 top-20 lg:top-auto w-80 lg:max-w-72 h-screen overflow-auto bg-custom-sidebar shadow-md lg:shadow-none -translate-x-full {% if showlarge %}lg:translate-x-0{% endif %} transition-all duration-200 ease-out">
  <!-- ... (le reste du code reste inchangé) ... -->
  <div class="pt-4 ">
    <ol>
      {% for group in site.sidebar %}
        {% set group_slug = group|slugify %}
        {% set group_pages = site.pages.showable|filter(p => p.section == 'docs' and p.folder starts with 'docs/' ~ group_slug) %}
        
        {% if group_pages|length > 0 %}
          <li class="group mb-4">
            <a href="#" class="group-title w-full text-left font-bold mb-2 flex items-center justify-between hover:bg-opacity-10 hover:bg-secondary-500 transition-colors duration-200" onclick="toggleGroup(this, event)">
              <span class="flex-grow pr-2">{{ group }}</span>
              <i class="bi bi-chevron-down transition-transform ml-auto"></i>
            </a>
            <ol class="group-content hidden pl-4">
              {% set subgroups = {} %}
              {% for page in group_pages %}
                {% set path_parts = page.folder|split('/') %}
                {% if path_parts|length > 2 %}
                  {% set subgroup = path_parts[2] %}
                  {% if subgroup not in subgroups|keys %}
                    {% set subgroups = subgroups|merge({(subgroup): []}) %}
                  {% endif %}
                  {% set subgroups = subgroups|merge({(subgroup): subgroups[subgroup]|merge([page])}) %}
                {% else %}
                  <li class="mb-2">
                    <a href="{{ url(page) }}" class="sidebar-link flex items-center " data-url="{{ url(page) }}">
                      <span>{{ page.title }}</span>
                    </a>
                  </li>
                {% endif %}
              {% endfor %}
              
              {% for subgroup, subgroup_pages in subgroups %}
                <li class="mb-2">
                  <a href="#" class="w-full text-left flex items-center hover:bg-opacity-10 hover:bg-secondary-500 transition-colors duration-200" onclick="toggleGroup(this, event)">
                    <span class="flex-grow pr-2">{{ subgroup|replace({'-': ' '})|title }}</span>
                    <i class="bi bi-chevron-down transition-transform ml-auto"></i>
                  </a>
                  <ol class="hidden pl-4 mt-2">
                    {% for page in subgroup_pages %}
                      <li class="mb-2">
                        <a href="{{ url(page) }}" class="sidebar-link flex items-center" data-url="{{ url(page) }}">
                          <span>{{ page.title }}</span>
                        </a>
                      </li>
                    {% endfor %}
                  </ol>
                </li>
              {% endfor %}
            </ol>
          </li>
        {% endif %}
      {% endfor %}
    </ol>
  </div>
  <!-- ... (le reste du code reste inchangé) ... -->
</div>

<script>
function toggleGroup(element, event) {
  event.preventDefault();
  const content = element.nextElementSibling;
  const icon = element.querySelector('i');
  content.classList.toggle('hidden');
  icon.classList.toggle('rotate-180');
}

document.addEventListener('DOMContentLoaded', function() {
  const sidebarLinks = document.querySelectorAll('.sidebar-link');
  const currentPath = window.location.pathname;

  function setActiveLink(url) {
    sidebarLinks.forEach(link => {
      if (link.getAttribute('data-url') === url) {
        link.classList.add('active', 'font-bold');
      } else {
        link.classList.remove('active', 'font-bold');
      }
    });
  }

  // Set initial active link
  setActiveLink(currentPath);

  sidebarLinks.forEach(link => {
    link.addEventListener('click', function(event) {
      event.preventDefault();
      const url = this.getAttribute('data-url');
      
      setActiveLink(url);
      
      // Load content without refreshing the page
      fetch(url)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const content = doc.querySelector('#content'); // Adjust this selector to match your main content area
          if (content) {
            document.querySelector('#content').innerHTML = content.innerHTML;
            history.pushState(null, '', url);
          }
        });
    });
  });
});
</script>