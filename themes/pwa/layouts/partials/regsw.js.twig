    {#- service worker registration ~#}
    <script>{% apply minify_js ~%}
      if ('serviceWorker' in navigator) {
        {%- if site.serviceworker.update.notification.enabled|default(false) ~%}
        // checks notification permission
        Notification.requestPermission(permission => {
          if (!('permission' in Notification)) {
            Notification.permission = permission;
          }
          return permission;
        })
        {%- endif ~%}
        {%- if site.serviceworker is defined and site.serviceworker.enabled ~%}
        // register service worker
        navigator.serviceWorker
          .register('{{ url(site.page('serviceworker'), {canonical: true}) }}', { scope: '/' })
          .then(function (registration) {
            {%- if site.debug|default(false) ~%}
            console.log('[SW] Registration successful with scope', registration.scope);
            {%- endif ~%}
            // checks if site have been updated
            //registration.update();
            registration.addEventListener('updatefound', () => {
              const installingSW = registration.installing;
              {%- if site.debug|default(false) ~%}
              console.log('[SW] A new version is being installed:', installingSW.state);
              {%- endif ~%}
              installingSW.onstatechange = () => {
                if (installingSW.state === 'installed') {
                  if (navigator.serviceWorker.controller) {
                    {%- if site.debug|default(false) ~%}
                    console.log('[SW] New version is available.');
                    {%- endif ~%}
                    {%- if site.serviceworker.update.snackbar.enabled|default(false) ~%}
                    // snackbar
                    showSnackbar('{{ "New version is available, please reload"|trans }}');
                    {%- endif ~%}
                    // badge
                    navigator.setAppBadge();
                    setTimeout(() => {
                      navigator.clearAppBadge();
                    }, 3000);
                    {%- if site.serviceworker.update.notification.enabled|default(false) ~%}
                    // notification
                    {%- if site.debug|default(false) ~%}
                    console.log('[SW] Notification enabled');
                    {%- endif ~%}
                    Notification.requestPermission().then((result) => {
                      if (result === "granted") {
                        navigator.serviceWorker.ready.then((registration) => {
                          const title = "{{ 'Update of %title%'|trans({'%title%': site.title}) }}";
                          const options = {
                            body: "{{ 'Website updated since your last visit.'|trans }}",
                            icon: '{{ asset(site.manifest.icons|first) }}',
                            vibrate: [200, 100, 100, 100]
                          };
                          registration.showNotification(title, options);
                        });
                      }
                    });
                    {%- endif ~%}
                  }
                }
              }
            });
          })
          .catch(function (error) {
            console.log('[SW]', error);
          });
        {%- endif ~%}
        {%- if site.serviceworker is defined and not site.serviceworker.enabled ~%}
        // Service worker is disabled:
        // 1. unregister
        navigator.serviceWorker.getRegistrations().then(registrations => {
          registrations.forEach(registration => {
            {%- if site.debug|default(false) ~%}
            console.log('[SW] Unregister');
            {%- endif ~%}
            registration.unregister()
          })
        })
        // 2. remove cache
        caches.keys().then(function(keyList) {
          Promise.all(keyList.map(function(key) {
            {%- if site.debug|default(false) ~%}
            console.log('[SW] Remove cache');
            {%- endif ~%}
            caches.delete(key);
          }));
        });
        {%- endif ~%}
      }
      {%- if site.serviceworker is defined and site.debug|default(false) ~%}
      // cache storage usage
      if ('webkitTemporaryStorage' in navigator && 'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {
        navigator.webkitTemporaryStorage.queryUsageAndQuota(
          function (usedBytes, grantedBytes) {
            console.log('Storage usage:', (usedBytes / 1048576).toFixed(2), '/', (grantedBytes / 1048576).toFixed(0), 'Mo');
          },
          function (error) { console.log('Error', error); }
        );
      };
      {%- endif ~%}
      {%- if not site.serviceworker.install.prompt ?? false ~%}
      window.addEventListener('beforeinstallprompt', (event) => {
        // prevents the default install dialog from appearing on mobile
        event.preventDefault();
      });
      {%- endif ~%}
      // offline?
      window.addEventListener('offline', () => {
        console.log('Network connection lost.');
        {%- if site.serviceworker.offline.snackbar.enabled|default(false) ~%}
        // snackbar
        showSnackbar('{{ "You are offline"|trans }}');
        {%- endif ~%}
      });
    {% endapply %}</script>
    <style>{% apply minify_css ~%}
      #snackbar {
        visibility: hidden;
        min-width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 4px;
        padding: 8px 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        transform: translate(-50%);
        bottom: 20px;
        font-size: 16px;
      }
      #snackbar.show {
        visibility: visible;
        -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
      }
      @-webkit-keyframes fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
      @keyframes fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
      @-webkit-keyframes fadeout {
        from {opacity: 1;}
        to {opacity: 0;}
      }
      @keyframes fadeout {
        from {opacity: 1;}
        to {opacity: 0;}
      }
      {% endapply %}</style>
    <div id="snackbar"></div>
    <script>{% apply minify_js ~%}
      function showSnackbar(message) {
        var snackbar = document.getElementById('snackbar');
        snackbar.className = 'show';
        snackbar.innerHTML = message;
        setTimeout(() => {
          snackbar.className = snackbar.className.replace('show', '');
        }, 3000);
      }
    {% endapply %}</script>