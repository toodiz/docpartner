var CACHE_VERSION = "{{ site.time }}";
var CACHE_NAME = '{{ site.title|slugify }}';
var CACHE = CACHE_NAME + '-v' + CACHE_VERSION;
var PATH_TO_IGNORE = [];
{% if site.serviceworker.ignore is defined and site.serviceworker.ignore %}
var PATH_TO_IGNORE = [{{ site.serviceworker.ignore|map(i => "'#{i.path}'") | join(', ')}}];
{% endif %}

// prepares precache
var precache = [];
// pages
{% set pages_to_precache = site.allpages|filter(p => p.published == true and p.redirect is not defined and p.serviceworker.precache ?? true != false)|sort((a, b) => a.path > b.path) %}
{% for page in pages_to_precache|slice(0, (site.serviceworker.install.precache.pages.limit ?? false) == false ? pages_to_precache|length : site.serviceworker.install.precache.pages.limit) %}
precache.push('{{ url(page, {canonical: false}) }}');
{% endfor %}
{%- block precache %}{% endblock -%}
{% if site.serviceworker.install.precache.assets is defined %}
// assets
  {%- for file in site.serviceworker.install.precache.assets ~%}
precache.push('{{ asset(file)|url({canonical: false}) }}');
  {%- endfor ~%}
{% endif %}

// install and precache
self.addEventListener('install', function(event) {
  self.skipWaiting(); // install the new SW immediately
  {%- if site.debug|default(false) ~%}
  console.log('[SW] Install');
  {%- endif ~%}
  event.waitUntil(
    caches.open(CACHE).then(function(cache) {
      {%- if site.debug|default(false) ~%}
      console.log(`[SW] Create cache storage "${CACHE}"`);
      {%- endif ~%}
      precache.forEach(function (path) {
        {%- if site.debug|default(false) ~%}
        console.log('[SW] Precache', path);
        {%- endif ~%}
        cache.add(new Request(path, {cache: '{{ site.serviceworker.cache.request|default('reload') }}'})).catch(error => console.error(`[SW] Can't add "${path}" to cache`));
      });
    })
  );
});

// activate and remove old cache
self.addEventListener('activate', function(event) {
  {%- if site.debug|default(false) ~%}
  console.log('[SW] Activate');
  {%- endif ~%}
  event.waitUntil(
    caches.keys().then(function(keyList) {
      return Promise.all(keyList.map(function(key) {
        // cache obsolete?
        if (key !== CACHE) {
          {%- if site.debug|default(false) ~%}
          console.log(`[SW] Remove old cache storage "${key}"`);
          {%- endif ~%}
          return caches.delete(key);
        }
      }));
    })
  );
});

// fetch
self.addEventListener('fetch', function(event) {
  url = new URL(event.request.url);
  // ignores...
  // ...not GET requests
  if (event.request.method !== 'GET') {
    return;
  }
  // ...not local resources, except images
  if (!(url.origin == location.origin) && event.request.destination !== 'image') {
    return;
  }
  // ...Cecil's watcher
  if (url.pathname == '/watcher') {
    return;
  }
  // ...optional paths
  try {
    PATH_TO_IGNORE.forEach(function (path) {
      if (url.pathname.startsWith(path)) {
        throw new Error('[SW] Ignore', path);
      }
    });
  } catch (e) {
    {%- if site.debug|default(false) ~%}
    console.log(e.message);
    {%- endif ~%}
    return;
  }
  {%- if site.debug|default(false) ~%}
  console.log('[SW] Fetch', event.request.url);
  {%- endif ~%}
  event.respondWith(
    // cache before
    caches.match(event.request).then(function(response) {
      if (response) {
        {%- if site.debug|default(false) ~%}
        console.log('[SW] Response from cache', event.request.url);
        {%- endif ~%}
        return response;
      }
      // put visited ressource to cache
      var fetchRequest = event.request.clone();
      return fetch(fetchRequest).then(function(response) {
        // ignore not valid response
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }
        var responseToCache = response.clone();
        caches.open(CACHE).then(function(cache) {
          // ignore not HTTP (ie "data:", "chrome-extension:", etc.)
          if (!event.request.url.startsWith('http')) {
            return;
          }
          {%- if site.debug|default(false) ~%}
          console.log('[SW] Put to cache', event.request.url);
          {%- endif ~%}
          cache.put(new Request(event.request, { cache: '{{ site.serviceworker.cache.request|default('reload') }}' }), responseToCache);
        });
        return response;
      })
      .catch(function(response) {
        // offline page
        if (event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('Accept').includes('text/html'))) {
          var langPrefix = '';
          var languages = [{{ site.languages|column('code')|map(l => "'#{l}'")|join(', ') }}];
          if (languages.length > 1) {
            var pathPrefix = url.pathname.split('/')[1]; // 'fr'?
            if (languages.includes(pathPrefix)) {
              var langPrefix = '/' + pathPrefix;
            }
          }
          return caches.match(langPrefix + '{{ url(site.serviceworker.offline.page|default('offline'), {canonical: false}) }}');
        }
        // offline image
        if (event.request.destination === 'image') {
          return new Response('<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">{{ 'Offline'|trans }}</title><g fill="none" fill-rule="evenodd"><path fill="#D8D8D8" d="M0 0h400v300H0z"/><text fill="#505050" font-family="Helvetica Neue,Arial,Helvetica,sans-serif" font-size="72" font-style="italic"><tspan x="{{ 400 // 'Offline'|trans|length }}" y="172">{{ 'Offline'|trans }}</tspan></text></g></svg>', { headers: { 'Content-Type': 'image/svg+xml' } });
        }
        return Response.error();
      });
    })
  );
});

{%- if site.serviceworker.update.notification.enabled|default(false) ~%}
// notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then((clientList) => {
      const hadWindowToFocus = clientList.some((windowClient) => windowClient.url.startsWith('{{ site.baseurl }}') ? (windowClient.focus(), true) : false);
      if (!hadWindowToFocus) {
        clients.openWindow('{{ site.baseurl }}').then((windowClient) => (windowClient ? windowClient.focus() : null));
      }
    })
  );
});
{%- endif ~%}